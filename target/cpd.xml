<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
   <duplication lines="45" tokens="319">
      <file line="76"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/StartOVXPort.java"/>
      <file line="76"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/StopOVXPort.java"/>
      <codefragment><![CDATA[                    "Start virtual port {} on virtual switch {} in virtual network {}",
                    port, dpid, virtualNetwork.getTenantId());
            OVXPort ovxPort = virtualNetwork.getSwitch(dpid.longValue())
                    .getPort(port.shortValue());
            Map<String, Object> reply = new HashMap<String, Object>(
                    ovxPort.getDBObject());
            reply.put(TenantHandler.VDPID, ovxPort.getParentSwitch()
                    .getSwitchId());
            reply.put(TenantHandler.TENANT, ovxPort.getTenantId());
            resp = new JSONRPC2Response(reply, 0);

        } catch (final MissingRequiredField e) {
            resp = new JSONRPC2Response(
                    new JSONRPC2Error(
                            JSONRPC2Error.INVALID_PARAMS.getCode(),
                            this.cmdName()
                                    + ": Unable to delete this virtual port in the virtual network : "
                                    + e.getMessage()), 0);
        } catch (final InvalidPortException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": Invalid port : " + e.getMessage()), 0);
        } catch (final InvalidTenantIdException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": Invalid tenant id : " + e.getMessage()), 0);
        } catch (final InvalidDPIDException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": Invalid virtual dpid : " + e.getMessage()), 0);
        } catch (final NetworkMappingException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": " + e.getMessage()), 0);
        }
        return resp;
    }


    @Override
    public JSONRPC2ParamsType getType() {
        return JSONRPC2ParamsType.OBJECT;
    }

}]]></codefragment>
   </duplication>
   <duplication lines="40" tokens="276">
      <file line="455"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/db/DBManager.java"/>
      <file line="541"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/db/DBManager.java"/>
      <codefragment><![CDATA[                    .get(TenantHandler.PATH);
            for (Map<String, Object> hop : path) {
                // Fetch link
                Long srcDpid = (Long) hop.get(TenantHandler.SRC_DPID);
                Short srcPort = ((Integer) hop.get(TenantHandler.SRC_PORT))
                        .shortValue();
                Long dstDpid = (Long) hop.get(TenantHandler.DST_DPID);
                Short dstPort = ((Integer) hop.get(TenantHandler.DST_PORT))
                        .shortValue();
                DPIDandPortPair dpp = new DPIDandPortPair(new DPIDandPort(
                        srcDpid, srcPort), new DPIDandPort(dstDpid, dstPort));
                // Register link in current manager
                mngr.registerLink(dpp);
                // Update list of managers that wait for this link
                List<OVXNetworkManager> mngrs = this.linkToMngr.get(dpp);
                if (mngrs == null) {
                    this.linkToMngr
                            .put(dpp, new ArrayList<OVXNetworkManager>());
                }
                this.linkToMngr.get(dpp).add(mngr);

                // Register src/dst switches of this link
                mngr.registerSwitch(srcDpid);
                mngr.registerSwitch(dstDpid);
                // Update list of managers that wait for these switches
                mngrs = this.dpidToMngr.get(srcDpid);
                if (mngrs == null) {
                    this.dpidToMngr.put(srcDpid,
                            new ArrayList<OVXNetworkManager>());
                }
                this.dpidToMngr.get(srcDpid).add(mngr);
                mngrs = this.dpidToMngr.get(dstDpid);
                if (mngrs == null) {
                    this.dpidToMngr.put(dstDpid,
                            new ArrayList<OVXNetworkManager>());
                }
                this.dpidToMngr.get(dstDpid).add(mngr);
            }
        }
    }]]></codefragment>
   </duplication>
   <duplication lines="41" tokens="271">
      <file line="384"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/services/forwarding/mpls/MplsForwarding.java"/>
      <file line="661"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/services/forwarding/mpls/MplsForwarding.java"/>
      <codefragment><![CDATA[            newPath.getSrcSwitch().setMplsFlowMod(mplsFlowMod.createBuilder().build());
            //newPath.getSrcSwitch().setmFlowMod(oldPath.getSrcSwitch().getmFlowMod());
            //log.info("getSrcSwitch After " + mplsFlowMod.toString());
        }

        if(newPath.getDstSwitch() != null) {
            mplsFlowMod = oldPath.getDstSwitch().getMplsFlowMod().createBuilder().build();

            //log.info("getDstSwitch Before " + ofFlowMod.toString());
            Match match = mplsFlowMod.getMatch().createBuilder().build();

            match = match.createBuilder()
                    .setExact(MatchField.ETH_SRC, newPath.getSrcHost().getMac())
                    .setExact(MatchField.ETH_DST, newPath.getDstHost().getMac())
                    .setExact(MatchField.ETH_TYPE, EthType.MPLS_UNICAST)
                    .setExact(MatchField.MPLS_LABEL, U32.of(label.getLabelValue()))
                    .build();

            match = OVXMessageUtil.updateMatch(mplsFlowMod.getMatch(), match);

            //log.info("getDstSwitch After " + match.toString());

            List<OFAction> actions = new LinkedList<>();

            OFActionPopMpls actionPopMpls = factory.actions().buildPopMpls()
                    .setEthertype(EthType.IPv4)
                    .build();
            actions.add(actionPopMpls);

            OFActionOutput ofActionOutput = factory.actions().buildOutput()
                    .setPort(OFPort.of(newPath.getDstSwitch().getOutPort().getPortNumber()))
                    .build();
            actions.add(ofActionOutput);

            mplsFlowMod = mplsFlowMod.createBuilder()
                    .setPriority(mplsFlowMod.getPriority())
                    .setMatch(match)
                    .setActions(actions)
                    .build();

            newPath.getDstSwitch().setMplsFlowMod(mplsFlowMod.createBuilder().build());]]></codefragment>
   </duplication>
   <duplication lines="35" tokens="249">
      <file line="68"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/StartOVXSwitch.java"/>
      <file line="67"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/StopOVXSwitch.java"/>
      <codefragment><![CDATA[            this.log.info("Start virtual switch {} in virtual network {}",
                    dpid, virtualNetwork.getTenantId());
            OVXSwitch ovxSwitch = virtualNetwork.getSwitch(dpid.longValue());
            Map<String, Object> reply = new HashMap<String, Object>(
                    ovxSwitch.getDBObject());
            reply.put(TenantHandler.TENANT, ovxSwitch.getTenantId());
            resp = new JSONRPC2Response(reply, 0);

        } catch (final MissingRequiredField e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": Unable to create virtual network : "
                    + e.getMessage()), 0);
        } catch (final InvalidDPIDException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": Invalid DPID : " + e.getMessage()), 0);
        } catch (final InvalidTenantIdException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": Invalid tenant id : " + e.getMessage()), 0);
        } catch (final NetworkMappingException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": " + e.getMessage()), 0);
        }
        return resp;

    }

    @Override
    public JSONRPC2ParamsType getType() {
        return JSONRPC2ParamsType.OBJECT;
    }
}]]></codefragment>
   </duplication>
   <duplication lines="42" tokens="219">
      <file line="82"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/MonitoringHandler.java"/>
      <file line="187"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/TenantHandler.java"/>
      <codefragment><![CDATA[            this.put("getVirtualAddressMapping", new GetVirtualAddressMapping());
        }
    };

    @Override
    public String[] handledRequests() {
        return this.handlers.keySet().toArray(new String[] {});
    }


    @Override
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public JSONRPC2Response process(final JSONRPC2Request req,
                                    final MessageContext ctxt) {

        final ApiHandler m = this.handlers.get(req.getMethod());
        if (m != null) {

            if (m.getType() != JSONRPC2ParamsType.NO_PARAMS
                    && m.getType() != req.getParamsType()) {
                return new JSONRPC2Response(new JSONRPC2Error(
                        JSONRPC2Error.INVALID_PARAMS.getCode(), req.getMethod()
                        + " requires: " + m.getType() + "; got: "
                        + req.getParamsType()), req.getID());
            }

            switch (m.getType()) {
                case NO_PARAMS:
                    return m.process(null);
                case ARRAY:
                    return m.process(req.getPositionalParams());
                case OBJECT:
                    return m.process(req.getNamedParams());
                default:
                    break;
            }
        }

        return new JSONRPC2Response(JSONRPC2Error.METHOD_NOT_FOUND, req.getID());
    }

}]]></codefragment>
   </duplication>
   <duplication lines="31" tokens="202">
      <file line="424"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/services/forwarding/mpls/MplsForwarding.java"/>
      <file line="701"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/services/forwarding/mpls/MplsForwarding.java"/>
      <codefragment><![CDATA[            newPath.getDstSwitch().setMplsFlowMod(mplsFlowMod.createBuilder().build());
            //newPath.getDstSwitch().setmFlowMod(oldPath.getDstSwitch().getmFlowMod());
            //log.info("getDstSwitch After " + mplsFlowMod.toString());
        }

        if(newPath.getIntermediate().size() != 0) {
            mplsFlowMod = oldPath.getDstSwitch().getMplsFlowMod().createBuilder().build();

            for (Node node : newPath.getIntermediate()) {

                Match match = mplsFlowMod.getMatch().createBuilder().build();

                match = match.createBuilder()
                        .setExact(MatchField.ETH_TYPE, EthType.MPLS_UNICAST)
                        .setExact(MatchField.MPLS_LABEL, U32.of(label.getLabelValue()))
                        .build();

                List<OFAction> actions = new LinkedList<>();

                OFActionOutput ofActionOutput = factory.actions().buildOutput()
                        .setPort(OFPort.of(node.getOutPort().getPortNumber()))
                        .build();
                actions.add(ofActionOutput);

                mplsFlowMod = mplsFlowMod.createBuilder()
                        .setPriority(mplsFlowMod.getPriority())
                        .setMatch(match)
                        .setActions(actions)
                        .build();

                node.setMplsFlowMod(mplsFlowMod.createBuilder().build());]]></codefragment>
   </duplication>
   <duplication lines="24" tokens="199">
      <file line="106"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/ConnectOVXLink.java"/>
      <file line="89"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/SetOVXLinkPath.java"/>
      <codefragment><![CDATA[                Map<String, Object> reply = new HashMap<String, Object>(
                        virtualLink.getDBObject());
                reply.put(TenantHandler.TENANT, virtualLink.getTenantId());
                resp = new JSONRPC2Response(reply, 0);
            }
        } catch (final MissingRequiredField e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": Unable to create virtual link : "
                    + e.getMessage()), 0);
        } catch (final VirtualLinkException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": Invalid virtual link : " + e.getMessage()), 0);
        } catch (final InvalidTenantIdException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": Invalid tenant id : " + e.getMessage()), 0);
        } catch (final IndexOutOfBoundException e) {
            resp = new JSONRPC2Response(
                    new JSONRPC2Error(
                            JSONRPC2Error.INVALID_PARAMS.getCode(),
                            this.cmdName()
                                    + ": Impossible to create the virtual link, too many links in this virtual network : "]]></codefragment>
   </duplication>
   <duplication lines="28" tokens="192">
      <file line="81"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/RemoveOVXPort.java"/>
      <file line="93"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/StartOVXPort.java"/>
      <file line="93"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/StopOVXPort.java"/>
      <codefragment><![CDATA[                    + e.getMessage()), 0);
        } catch (final InvalidPortException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": Invalid port : " + e.getMessage()), 0);
        } catch (final InvalidTenantIdException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": Invalid tenant id : " + e.getMessage()), 0);
        } catch (final InvalidDPIDException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": Invalid virtual dpid : " + e.getMessage()), 0);
        } catch (final NetworkMappingException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": " + e.getMessage()), 0);
        }
        return resp;
    }


    @Override
    public JSONRPC2ParamsType getType() {
        return JSONRPC2ParamsType.OBJECT;
    }

}]]></codefragment>
   </duplication>
   <duplication lines="27" tokens="187">
      <file line="112"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/packet/AbstractSegment.java"/>
      <file line="218"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/packet/TCP.java"/>
      <codefragment><![CDATA[        if (this.checksum == 0) {
            bb.rewind();
            int accumulation = 0;

            // compute pseudo header mac
            if (this.parent != null && this.parent instanceof IPv4) {
                final IPv4 ipv4 = (IPv4) this.parent;
                accumulation += (ipv4.getSourceAddress() >> 16 & 0xffff)
                        + (ipv4.getSourceAddress() & 0xffff);
                accumulation += (ipv4.getDestinationAddress() >> 16 & 0xffff)
                        + (ipv4.getDestinationAddress() & 0xffff);
                accumulation += ipv4.getProtocol() & 0xff;
                accumulation += length & 0xffff;
            }

            for (int i = 0; i < length / 2; ++i) {
                accumulation += 0xffff & bb.getShort();
            }
            // pad to an even number of shorts
            if (length % 2 > 0) {
                accumulation += (bb.get() & 0xff) << 8;
            }

            accumulation = (accumulation >> 16 & 0xffff)
                    + (accumulation & 0xffff);
            this.checksum = (short) (~accumulation & 0xffff);
            bb.putShort(6, this.checksum);]]></codefragment>
   </duplication>
   <duplication lines="28" tokens="179">
      <file line="357"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/services/forwarding/mpls/MplsForwarding.java"/>
      <file line="634"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/services/forwarding/mpls/MplsForwarding.java"/>
      <codefragment><![CDATA[            match = OVXMessageUtil.updateMatch(mplsFlowMod.getMatch(), match);

            //log.info("getSrcSwitch After " + match.toString());

            List<OFAction> actions = new LinkedList<>();

            OFActionPushMpls actionPushMpls = factory.actions().buildPushMpls()
                    .setEthertype(EthType.MPLS_UNICAST)
                    .build();
            actions.add(actionPushMpls);

            OFActionSetField actionSetMplsLabel = factory.actions().buildSetField()
                    .setField(factory.oxms().mplsLabel(U32.of(label.getLabelValue())))
                    .build();
            actions.add(actionSetMplsLabel);

            OFActionOutput ofActionOutput = factory.actions().buildOutput()
                    .setPort(OFPort.of(newPath.getSrcSwitch().getOutPort().getPortNumber()))
                    .build();
            actions.add(ofActionOutput);

            mplsFlowMod = mplsFlowMod.createBuilder()
                    .setPriority(mplsFlowMod.getPriority())
                    .setMatch(match)
                    .setActions(actions)
                    .build();

            newPath.getSrcSwitch().setMplsFlowMod(mplsFlowMod.createBuilder().build());]]></codefragment>
   </duplication>
   <duplication lines="35" tokens="166">
      <file line="431"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/messages/OVXFlowMod.java"/>
      <file line="575"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/messages/OVXFlowMod.java"/>
      <codefragment><![CDATA[                        if (this.getOFMessage().getVersion() == OFVersion.OF_10) {

                         /*  this.getFlowMod().getMatch()
                                    .createBuilder()
                                    .wildcard(MatchField.IN_PORT)
                                    .setExact(MatchField.IN_PORT, OFPort.of(inPort.getPhysicalPortNumber()))
                                    .build();


                            this.getFlowMod().getMatch()
                                    .createBuilder()
                                    .wildcard(MatchField.ETH_SRC)
                                    .setExact(MatchField.ETH_SRC, MacAddress.of(lUtils.getSrcMac().getBytes()))
                                    .build();

                            this.getFlowMod().getMatch()
                                    .createBuilder()
                                    .wildcard(MatchField.ETH_DST)
                                    .setExact(MatchField.ETH_DST, MacAddress.of(lUtils.getDstMac().getBytes()))
                                    .build();

                            this.getFlowMod().getMatch()
                                    .createBuilder()
                                    .wildcard(MatchField.ETH_TYPE)
                                    .setExact(MatchField.ETH_TYPE, EthType.IPv4)
                                    .build();
*/
                            this.modifyMatch(OVXMessageUtil.updateMatch(this.getFlowMod().getMatch(), this.getFlowMod().getMatch().createBuilder()
                                    .setExact(MatchField.IN_PORT, this.getFlowMod().getMatch().get(MatchField.IN_PORT))
                                    .setExact(MatchField.ETH_SRC, this.getFlowMod().getMatch().get(MatchField.ETH_SRC))
                                    .setExact(MatchField.ETH_DST, this.getFlowMod().getMatch().get(MatchField.ETH_DST))
                                    .setExact(MatchField.ETH_TYPE, EthType.IPv4)
                                    .setExact(MatchField.IPV4_SRC, this.getFlowMod().getMatch().get(IPV4_SRC))
                                    .setExact(MatchField.IPV4_DST, this.getFlowMod().getMatch().get(IPV4_DST))
                                    .build()));]]></codefragment>
   </duplication>
   <duplication lines="25" tokens="165">
      <file line="45"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/RemoveOVXPort.java"/>
      <file line="47"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/StartOVXPort.java"/>
      <file line="47"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/StopOVXPort.java"/>
      <codefragment><![CDATA[    Logger log = LogManager.getLogger(RemoveOVXPort.class.getName());

    @Override
    public JSONRPC2Response process(final Map<String, Object> params) {
        JSONRPC2Response resp = null;

        try {
            final Number tenantId = HandlerUtils.<Number>fetchField(
                    TenantHandler.TENANT, params, true, null);
            final Number dpid = HandlerUtils.<Number>fetchField(
                    TenantHandler.VDPID, params, true, null);
            final Number port = HandlerUtils.<Number>fetchField(
                    TenantHandler.VPORT, params, true, null);

            HandlerUtils.isValidTenantId(tenantId.intValue());
            HandlerUtils
                    .isValidOVXSwitch(tenantId.intValue(), dpid.longValue());
            HandlerUtils.isValidOVXPort(tenantId.intValue(), dpid.longValue(),
                    port.shortValue());

            final OVXMap map = OVXMap.getInstance();
            final OVXNetwork virtualNetwork = map.getVirtualNetwork(tenantId
                    .intValue());

            virtualNetwork.removePort(dpid.longValue(), port.shortValue());]]></codefragment>
   </duplication>
   <duplication lines="35" tokens="165">
      <file line="431"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/messages/OVXFlowMod.java"/>
      <file line="474"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/messages/OVXFlowMod.java"/>
      <file line="575"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/messages/OVXFlowMod.java"/>
      <codefragment><![CDATA[                        if (this.getOFMessage().getVersion() == OFVersion.OF_10) {

                         /*  this.getFlowMod().getMatch()
                                    .createBuilder()
                                    .wildcard(MatchField.IN_PORT)
                                    .setExact(MatchField.IN_PORT, OFPort.of(inPort.getPhysicalPortNumber()))
                                    .build();


                            this.getFlowMod().getMatch()
                                    .createBuilder()
                                    .wildcard(MatchField.ETH_SRC)
                                    .setExact(MatchField.ETH_SRC, MacAddress.of(lUtils.getSrcMac().getBytes()))
                                    .build();

                            this.getFlowMod().getMatch()
                                    .createBuilder()
                                    .wildcard(MatchField.ETH_DST)
                                    .setExact(MatchField.ETH_DST, MacAddress.of(lUtils.getDstMac().getBytes()))
                                    .build();

                            this.getFlowMod().getMatch()
                                    .createBuilder()
                                    .wildcard(MatchField.ETH_TYPE)
                                    .setExact(MatchField.ETH_TYPE, EthType.IPv4)
                                    .build();
*/
                            this.modifyMatch(OVXMessageUtil.updateMatch(this.getFlowMod().getMatch(), this.getFlowMod().getMatch().createBuilder()
                                    .setExact(MatchField.IN_PORT, this.getFlowMod().getMatch().get(MatchField.IN_PORT))
                                    .setExact(MatchField.ETH_SRC, this.getFlowMod().getMatch().get(MatchField.ETH_SRC))
                                    .setExact(MatchField.ETH_DST, this.getFlowMod().getMatch().get(MatchField.ETH_DST))
                                    .setExact(MatchField.ETH_TYPE, EthType.IPv4)
                                    .setExact(MatchField.IPV4_SRC, this.getFlowMod().getMatch().get(IPV4_SRC))
                                    .setExact(MatchField.IPV4_DST, this.getFlowMod().getMatch().get(IPV4_DST))
                                    .build()));]]></codefragment>
   </duplication>
   <duplication lines="32" tokens="155">
      <file line="128"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/services/failover/FailOver.java"/>
      <file line="568"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/services/vm/Migration.java"/>
      <codefragment><![CDATA[    }




    public void removeOldPhysicalPathFlowEntry(PhysicalPath pPath) {

        if(pPath.isOriginalPath()) {
            if(pPath.getMplsLabel().getPathIDs().size() == 0) {
                log.info("Remove Old Original PhysicalPath for PathID [{}]", pPath.getPathID());

                sendFlowDeleteStrict(pPath.getSrcSwitch());

                for(Node node : pPath.getIntermediate()) {
                    sendFlowDeleteStrict(node);
                }

                sendFlowDeleteStrict(pPath.getDstSwitch());
            }else{
                log.info("Remove Old Original PhysicalPath Edge Switch for PathID [{}]", pPath.getPathID());

                sendFlowDeleteStrict(pPath.getSrcSwitch());
                sendFlowDeleteStrict(pPath.getDstSwitch());
            }
        }else{
            log.info("Remove Old Referenced PhysicalPath Edge Switch for PathID [{}]", pPath.getPathID());
            sendFlowDeleteStrict(pPath.getSrcSwitch());
            sendFlowDeleteStrict(pPath.getDstSwitch());
        }
    }

    public void sendFlowDeleteStrict(Node node) {]]></codefragment>
   </duplication>
   <duplication lines="24" tokens="151">
      <file line="77"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/RemoveOVXSwitch.java"/>
      <file line="80"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/StartOVXSwitch.java"/>
      <file line="79"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/StopOVXSwitch.java"/>
      <codefragment><![CDATA[                    + e.getMessage()), 0);
        } catch (final InvalidDPIDException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": Invalid DPID : " + e.getMessage()), 0);
        } catch (final InvalidTenantIdException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": Invalid tenant id : " + e.getMessage()), 0);
        } catch (final NetworkMappingException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": " + e.getMessage()), 0);
        }

        return resp;
    }

    @Override
    public JSONRPC2ParamsType getType() {
        return JSONRPC2ParamsType.OBJECT;
    }

}]]></codefragment>
   </duplication>
   <duplication lines="32" tokens="147">
      <file line="435"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/services/vm/Migration.java"/>
      <file line="515"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/services/vm/Migration.java"/>
      <codefragment><![CDATA[                tempNode.setOutPort(newpPath.getDstHost().getPort().getPhysicalPort());

                newpPath.setDstSwitch(tempNode);

            }else{
                //log.info("findPhysicalPath physicalLinks.size( {} )", physicalLinks.size());
                Node srcNode = null;
                Node dstNode = null;
                LinkedList<Node> nodes = new LinkedList<>();

                for(PhysicalLink plink : physicalLinks) {
                    if(srcNode == null) {
                        srcNode = new Node(plink.getSrcSwitch());
                    }

                    srcNode.setOutPort(plink.getSrcPort());

                    nodes.add(srcNode);

                    dstNode = new Node(plink.getDstSwitch());
                    dstNode.setInPort(plink.getDstPort());

                    srcNode = dstNode;

                    if(plink.equals(physicalLinks.getLast())) {
                        nodes.add(srcNode);
                    }
                }

                for(Node node : nodes) {
                    if(node.equals(nodes.getFirst())) {
                        node.setInPort(physicalLinks.get(0).getSrcSwitch().getPort(pInport));]]></codefragment>
   </duplication>
   <duplication lines="24" tokens="146">
      <file line="48"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/MonitoringService.java"/>
      <file line="48"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/TenantService.java"/>
      <codefragment><![CDATA[        this.dispatcher.register(new MonitoringHandler());
    }

    @Override
    public void handle(final HttpServletRequest request,
            final HttpServletResponse response) {
        JSONRPC2Request json = null;
        JSONRPC2Response jsonResp = null;
        try {
            json = this.parseJSONRequest(request);
            jsonResp = this.dispatcher.process(json, null);
            jsonResp.setID(json.getID());
        } catch (final IOException e) {
            jsonResp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.PARSE_ERROR.getCode(),
                    AbstractService.stack2string(e)), 0);
        } catch (final JSONRPC2ParseException e) {
            jsonResp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.PARSE_ERROR.getCode(),
                    AbstractService.stack2string(e)), 0);
        }
        try {
            this.writeJSONObject(response, jsonResp);
        } catch (final IOException e) {]]></codefragment>
   </duplication>
   <duplication lines="24" tokens="138">
      <file line="119"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/messages/statistics/OVXAggregateStatsRequest.java"/>
      <file line="128"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/messages/statistics/OVXFlowStatsRequest.java"/>
      <codefragment><![CDATA[    }

    private List<PhysicalSwitch> getPhysicalSwitches(OVXSwitch sw) {
        if (sw instanceof OVXSingleSwitch) {
            try {
                return sw.getMap().getPhysicalSwitches(sw);
            } catch (SwitchMappingException e) {
                log.debug("OVXSwitch {} does not map to any physical switches",
                        sw.getSwitchName());
                return new LinkedList<>();
            }
        }
        LinkedList<PhysicalSwitch> sws = new LinkedList<PhysicalSwitch>();
        for (OVXPort p : sw.getPorts().values()) {
            if (!sws.contains(p.getPhysicalPort().getParentSwitch())) {
                sws.add(p.getPhysicalPort().getParentSwitch());
            }
        }
        return sws;
    }

    @Override
    public int hashCode() {
        return this.ofAggregateStatsRequest.hashCode();]]></codefragment>
   </duplication>
   <duplication lines="18" tokens="137">
      <file line="99"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/ConnectHost.java"/>
      <file line="98"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/CreateOVXPort.java"/>
      <codefragment><![CDATA[                    + ": Unable to connect host : " + e.getMessage()),
                    0);
        } catch (final InvalidPortException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": Invalid port : " + e.getMessage()), 0);
        } catch (final InvalidTenantIdException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": Invalid tenant id : " + e.getMessage()), 0);
        } catch (final IndexOutOfBoundException e) {
            resp = new JSONRPC2Response(
                    new JSONRPC2Error(
                            JSONRPC2Error.INVALID_PARAMS.getCode(),
                            this.cmdName()
                                    + ": Impossible to create the virtual port, too many ports on this virtual switch : "
                                    + e.getMessage()), 0);
        } catch (final NetworkMappingException e) {]]></codefragment>
   </duplication>
   <duplication lines="14" tokens="136">
      <file line="93"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/AddController.java"/>
      <file line="105"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/CreateOVXSwitch.java"/>
      <codefragment><![CDATA[                                    + e.getMessage()), 0);
        } catch (final InvalidDPIDException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": Invalid DPID : " + e.getMessage()), 0);
        } catch (final InvalidTenantIdException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": Invalid tenant id : " + e.getMessage()), 0);
        } catch (final NetworkMappingException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": " + e.getMessage()), 0);
        } catch (ControllerUnavailableException e) {]]></codefragment>
   </duplication>
   <duplication lines="14" tokens="134">
      <file line="93"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/AddController.java"/>
      <file line="105"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/CreateOVXSwitch.java"/>
      <file line="77"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/RemoveOVXSwitch.java"/>
      <file line="80"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/StartOVXSwitch.java"/>
      <file line="79"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/StopOVXSwitch.java"/>
      <codefragment><![CDATA[                                    + e.getMessage()), 0);
        } catch (final InvalidDPIDException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": Invalid DPID : " + e.getMessage()), 0);
        } catch (final InvalidTenantIdException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": Invalid tenant id : " + e.getMessage()), 0);
        } catch (final NetworkMappingException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": " + e.getMessage()), 0);
        } catch (ControllerUnavailableException e) {]]></codefragment>
   </duplication>
   <duplication lines="19" tokens="125">
      <file line="132"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/services/path/physicalpath/PhysicalPath.java"/>
      <file line="403"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/services/path/virtualpath/VirtualPath.java"/>
      <codefragment><![CDATA[        str = str + "FlowID = " + this.getFlowID() + "\n";
        str = str + "TenantID = " + this.getTenantID() + "\n";

        if(this.getSrcSwitch() != null) {
            str = str + "SrcSwitch = " + this.getSrcSwitch().toString() + "\n";
        }

        if(this.getIntermediate().size() != 0) {
            for(Node node : this.getIntermediate()) {
                //log.info("Intermediate = " + node.toString());
                str = str + "Intermediate = " + node.toString() + "\n";
            }
        }

        if(this.getDstSwitch() != null) {
            str = str + "DstSwitch = " + this.getDstSwitch().toString() + "\n";
        }

        if(this.originalPathID != null) {]]></codefragment>
   </duplication>
   <duplication lines="22" tokens="122">
      <file line="45"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/RemoveOVXSwitch.java"/>
      <file line="46"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/StartOVXSwitch.java"/>
      <file line="46"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/StopOVXSwitch.java"/>
      <codefragment><![CDATA[    Logger log = LogManager.getLogger(RemoveOVXSwitch.class.getName());


    @Override
    public JSONRPC2Response process(final Map<String, Object> params) {
        JSONRPC2Response resp = null;

        try {
            final Number tenantId = HandlerUtils.<Number>fetchField(
                    TenantHandler.TENANT, params, true, null);
            final Number dpid = HandlerUtils.<Number>fetchField(
                    TenantHandler.VDPID, params, true, null);


            HandlerUtils.isValidTenantId(tenantId.intValue());
            HandlerUtils
                    .isValidOVXSwitch(tenantId.intValue(), dpid.longValue());

            final OVXMap map = OVXMap.getInstance();
            final OVXNetwork virtualNetwork = map.getVirtualNetwork(tenantId
                    .intValue());
            virtualNetwork.removeSwitch(dpid.longValue());]]></codefragment>
   </duplication>
   <duplication lines="24" tokens="115">
      <file line="340"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/services/path/physicalpath/PhysicalPath.java"/>
      <file line="444"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/services/path/physicalpath/PhysicalPath.java"/>
      <codefragment><![CDATA[                Node srcNode = null;
                Node dstNode = null;
                LinkedList<Node> nodes = new LinkedList<>();

                for(PhysicalLink plink : physicalLinks) {
                    if(srcNode == null) {
                        srcNode = new Node(plink.getSrcSwitch());
                    }

                    srcNode.setOutPort(plink.getSrcPort());

                    nodes.add(srcNode);

                    dstNode = new Node(plink.getDstSwitch());
                    dstNode.setInPort(plink.getDstPort());

                    srcNode.setNextNode(dstNode);

                    srcNode = dstNode;

                    if(plink.equals(physicalLinks.getLast())) {
                        nodes.add(srcNode);
                    }
                }]]></codefragment>
   </duplication>
   <duplication lines="20" tokens="114">
      <file line="214"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/linkdiscovery/SwitchDiscoveryManager.java"/>
      <file line="250"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/linkdiscovery/SwitchDiscoveryManager.java"/>
      <codefragment><![CDATA[    private OFPacketOut createLLDPPacketOut(final PhysicalPort port)
            throws PortMappingException {
        if (port == null) {
            throw new PortMappingException(
                    "Cannot send LLDP associated with a nonexistent port");
        }

        ArrayList<OFAction> actionList = new ArrayList<OFAction>();
        OFActions actions = this.factory.actions();

        OFActionOutput output = actions.buildOutput()
                .setMaxLen(0xffff)
                .setPort(OFPort.of(port.getPortNumber()))
                .build();
        actionList.add(output);

        this.lldpPacket.setPort(port);
        this.ethPacket.setSourceMACAddress(port.getOfPort().getHwAddr().getBytes());

        final byte[] lldp = this.ethPacket.serialize();]]></codefragment>
   </duplication>
   <duplication lines="19" tokens="110">
      <file line="140"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/ConnectOVXRoute.java"/>
      <file line="122"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/SetOVXLinkPath.java"/>
      <codefragment><![CDATA[                                    + e.getMessage()), 0);
        } catch (final NetworkMappingException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": " + e.getMessage()), 0);
        } catch (final InvalidPriorityException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": " + e.getMessage()), 0);
        }
        return resp;
    }


    @Override
    public JSONRPC2ParamsType getType() {
        return JSONRPC2ParamsType.OBJECT;
    }
}]]></codefragment>
   </duplication>
   <duplication lines="20" tokens="110">
      <file line="83"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/DisconnectOVXLink.java"/>
      <file line="78"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/RemoveOVXNetwork.java"/>
      <file line="81"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/RemoveOVXSwitch.java"/>
      <file line="73"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/StartOVXNetwork.java"/>
      <file line="84"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/StartOVXSwitch.java"/>
      <file line="74"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/StopOVXNetwork.java"/>
      <file line="83"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/api/service/handlers/tenant/StopOVXSwitch.java"/>
      <codefragment><![CDATA[                    + ": Invalid virtual link : " + e.getMessage()), 0);
        } catch (final InvalidTenantIdException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": Invalid tenant id : " + e.getMessage()), 0);
        } catch (final NetworkMappingException e) {
            resp = new JSONRPC2Response(new JSONRPC2Error(
                    JSONRPC2Error.INVALID_PARAMS.getCode(), this.cmdName()
                    + ": " + e.getMessage()), 0);
        }
        return resp;
    }

    @Override
    public JSONRPC2ParamsType getType() {
        return JSONRPC2ParamsType.OBJECT;
    }


}]]></codefragment>
   </duplication>
   <duplication lines="17" tokens="104">
      <file line="214"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/packet/TCP.java"/>
      <file line="146"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/packet/UDP.java"/>
      <codefragment><![CDATA[            ((IPv4) this.parent).setProtocol(IPv4.PROTOCOL_TCP);
        }

        // compute checksum if needed
        if (this.checksum == 0) {
            bb.rewind();
            int accumulation = 0;

            // compute pseudo header mac
            if (this.parent != null && this.parent instanceof IPv4) {
                final IPv4 ipv4 = (IPv4) this.parent;
                accumulation += (ipv4.getSourceAddress() >> 16 & 0xffff)
                        + (ipv4.getSourceAddress() & 0xffff);
                accumulation += (ipv4.getDestinationAddress() >> 16 & 0xffff)
                        + (ipv4.getDestinationAddress() & 0xffff);
                accumulation += ipv4.getProtocol() & 0xff;
                accumulation += length & 0xffff;]]></codefragment>
   </duplication>
   <duplication lines="13" tokens="102">
      <file line="112"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/packet/AbstractSegment.java"/>
      <file line="150"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/packet/UDP.java"/>
      <codefragment><![CDATA[        if (this.checksum == 0) {
            bb.rewind();
            int accumulation = 0;

            // compute pseudo header mac
            if (this.parent != null && this.parent instanceof IPv4) {
                final IPv4 ipv4 = (IPv4) this.parent;
                accumulation += (ipv4.getSourceAddress() >> 16 & 0xffff)
                        + (ipv4.getSourceAddress() & 0xffff);
                accumulation += (ipv4.getDestinationAddress() >> 16 & 0xffff)
                        + (ipv4.getDestinationAddress() & 0xffff);
                accumulation += ipv4.getProtocol() & 0xff;
                accumulation += length & 0xffff;]]></codefragment>
   </duplication>
   <duplication lines="13" tokens="101">
      <file line="345"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/services/forwarding/mpls/MplsForwarding.java"/>
      <file line="620"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/services/forwarding/mpls/MplsForwarding.java"/>
      <codefragment><![CDATA[        OFFlowMod mplsFlowMod = null;

        if(newPath.getSrcSwitch() != null) {
            mplsFlowMod = oldPath.getSrcSwitch().getMplsFlowMod().createBuilder().build();

            //log.info("getSrcSwitch Before " + ofFlowMod.toString());
            Match match = mplsFlowMod.getMatch().createBuilder().build();

            match = match.createBuilder()
                    .setExact(MatchField.IN_PORT, OFPort.of(newPath.getSrcSwitch().getInPort().getPortNumber()))
                    .build();

            match = OVXMessageUtil.updateMatch(mplsFlowMod.getMatch(), match);]]></codefragment>
   </duplication>
   <duplication lines="19" tokens="100">
      <file line="295"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/messages/OVXFlowMod.java"/>
      <file line="377"
            path="/home/con2/anu/Libera0.1/src/main/java/net/onrc/openvirtex/messages/OVXFlowMod.java"/>
      <codefragment><![CDATA[    private void prepAndSendSouth(OVXPort inPort, boolean pflag, OVXMatch ovxMatch) throws IndexOutOfBoundException {

        if (!inPort.isActive()) {
            log.warn("Virtual network {}: port {} on switch {} is down.",
                    sw.getTenantId(), inPort.getPortNumber(),
                    sw.getSwitchName());
            return;
        }

        this.modifyMatch(
                OVXMessageUtil.updateMatch(
                        this.getFlowMod().getMatch(),
                        this.getFlowMod().getMatch().createBuilder()
                                .setExact(MatchField.IN_PORT, OFPort.of(inPort.getPhysicalPortNumber()))
                                .build()
                )
        );

        OVXMessageUtil.translateXid(this, inPort);]]></codefragment>
   </duplication>
</pmd-cpd>